import datetime
import os


class Logger():

    file_name = f"logs/log_" + str(datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")) + ".log"

    @classmethod #Метод write_log_to_file сможет обращаться к переменным класса (вместо self пишем cls)
    def write_log_to_file(cls, data: str):
        with open(cls.file_name, 'a', encoding= 'utf-8') as logger_file:
            logger_file.write(data) #Запишем данный в файл, которые передадим при вызове

    @classmethod
    def add_request(cls, url: str, method: str):   #Получаем данные по нашему запросу
        test_name = os.environ.get("PYTEST_CURRENT_TEST")

        data_to_add = f'\n-----\n'
        data_to_add += f"Test: {test_name}\n"      #Будет добавляться (+=) к каждой строчке
        data_to_add += f'Time: {str(datetime.datetime.now())}\n'
        data_to_add += f'Request method: {method}\n'
        data_to_add += f'Request URL: {url}\n'
        data_to_add += '\n'

        cls.write_log_to_file(data_to_add)

    @classmethod
    def add_response(cls, result):                   #Получаем ответ на наш запрос
        cookies_as_dict = dict(result.cookies)       #Обращаемся к куки, чтобы поместить их в логи
        headers_as_dict = dict(result.headers)      #Обращаемся к заголовкам,чтобы поместить их в логи

        data_to_add = f'Response code:  {result.status_code}\n'
        data_to_add += f'Response text:  {result.text}\n'
        data_to_add += f'Response headers:  {headers_as_dict}\n'
        data_to_add += f'Response cookies:  {cookies_as_dict}\n'
        data_to_add += f'\n-----\n'

        cls.write_log_to_file(data_to_add)